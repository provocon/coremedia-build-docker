#
# Copyright 2017-2022 Martin Goellnitz, Markus Schwarz.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Example starting point for a GitLab build file for CoreMedia CMCC workspaces
#
# Relies on the following Variables to be set:
#
# External Image Repository:
#   EXTERNAL_REGISTRY
#   EXTERNAL_REGISTRY_USER
#   EXTERNAL_REGISTRY_PASSWORD
# CoreMedia Maven Artifacts Repository User and Password:
#   CM_MAVEN_USER
#   CM_MAVEN_PASSWORD
# CoreMedia NPM Registry Token
#   NPMRC_TOKEN
#
image: provocon/coremedia-build:2110.5

# Because $envName-Deployments are manual jobs, they could be executed without
# a prior build because in almost any cases docker container were present and
# could be deployed. So they can be executed, even if the build and push jobs
# where not executed for any reason.
stages:
  - create

variables:
  MAVEN_OPTS: $MAVEN_OPTS
  # https://gitlab.com/gitlab-org/gitlab-runner/issues/3605
  DOCKER_STRATEGY: exec
  GIT_SUBMODULES: init
  GIT_SUBMODULE_STRATEGY: recursive
  DOCKER_DRIVER: overlay2
  # https://gitlab.com/gitlab-org/gitlab-runner/issues/4501
  # thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  # Seems necessary with kubernetes executor
  # DOCKER_TLS_CERTDIR: ""
  # DOCKER_HOST: tcp://docker:2375

.variables: &gitlabRegistryVars
  CONT_REGISTRY: $CI_REGISTRY
  CONT_REGISTRY_PATH: "$CI_REGISTRY\\/${CI_PROJECT_NAMESPACE}\\/${CI_PROJECT_NAME}"
  CONT_REGISTRY_USER: $CI_REGISTRY_USER
  CONT_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD

# Generate and push components as docker images
.create_containers: &createContainers
  stage: create
  # Cache downloaded dependencies and plugins between builds.
  # To keep cache across branches add key.
  cache:
    key: "cmcc-10"
    paths:
      - .remote-packages/
      - $CI_PROJECT_DIR/repository
  # https://docs.gitlab.com/runner/executors/docker.html#use-docker-in-docker-with-privileged-mode
  services:
    - docker:20.10-dind
  script:
    # Use maven settings from workspace
    - mkdir -p ~/.m2 && cp $CI_PROJECT_DIR/workspace-configuration/maven-settings.xml ~/.m2/settings.xml
    # Cache preparation and check
    - mkdir -p $CI_PROJECT_DIR/repository
    - mkdir -p .remote-packages
    - repoJars=$(find $CI_PROJECT_DIR/repository -type f -name "*.jar" | wc -l) && echo "[cache-check] $repoJars JARs in Maven Repository"
    - remoteFiles=$(find .remote-packages -type f | wc -l) && echo "[cache-check] $remoteFiles file in JavaScript Cache"
    # To support reproducable builds, CoreMedia uses a dummy date.
    # We replace this by the commit date, which should also remain constant.
    - BUILD_DATE=$(git log -n 1 --date='format:%Y-%m-%dT%H:%M:%SZ' --format="%ad")
    - find -name pom.xml -exec sed -i "s/project.build.outputTimestamp.202[0-9].[0-1][0-9].[0-3][0-9]T[0-9][0-9]:[0-9][0-9]:[0-9][0-9]Z..project.build.outputTimestamp/project.build.outputTimestamp\\>$BUILD_DATE\\<\\/project.build.outputTimestamp/" {} \;
    # release and provider tagging - some tweaks to handle branch and tag name patterns
    # Branch names starting with cmcc- are considered work in progress and packages thus
    # named 1-SNAPSHOT. Versions in the pom.xml don't need to be 1-SNAPSHOT before all
    # this: We will find out.
    - sed -i -e 's/customer.Blueprint..customer/customer>PROVOCON<\/customer/g' $(find -name "pom.xml"|grep blueprint-parent)
    - VERSION_AFTER=$(echo "${CI_COMMIT_REF_NAME}"|sed -e 's/^v\(.*\)-CMCC/\1/g'|sed -e 's/^cmcc.*/1-SNAPSHOT/g')
    - VERSION_STRING=`head -15 pom.xml |tail -14 |grep version`
    - VERSION_BEFORE=`echo $VERSION_STRING|sed -e 's/.*version.\(.*\)..version.*/\1/g'`
    - echo "$BUILD_DATE $VERSION_BEFORE -> $VERSION_AFTER"
    - |
      if [ "$VERSION_BEFORE" != "$VERSION_AFTER" ] ; then
        find -name pom.xml -exec sed -i "s/version.$VERSION_BEFORE..version/version\\>$VERSION_AFTER\\<\\/version/" {} \;
        find -name pom.xml -exec sed -i "s/\(<cm.[a-z\-]*.bp.version>\)1-SNAPSHOT\(<\/.*>\)/\1$VERSION_AFTER\2/g" {} \;
      fi
    # Be snapshot safe
    - rm -rf $(find $CI_PROJECT_DIR/repository/com/coremedia -name "$VERSION_AFTER")
    # Try docker login to extend download rate
    - test ! -z "$DH_REGISTRY_USER" && docker login -u $DH_REGISTRY_USER -p $DH_REGISTRY_PASSWORD
    #
    # Jangaroo unit tests were skipped with -Dskip-joo-unit-tests=true because currently they are 100% from
    # CoreMedia.
    # Also CoreMedia tests are skipped in favor of project specific tests to save our time.
    #
    - | # We skip frontend and content module processing with: skipContent=true & skipThemes=true
      mvn install -Pwith-docker -Dmaven.compiler.forceJavacCompilerUse=true \
      -B --no-transfer-progress -Dorg.slf4j.simpleLogger.defaultLogLevel=warn \
      -DskipContent=true -DskipThemes=true -Dskip-joo-unit-tests=true \
      -DjooUnitWebDriverBrowserArguments=--no-sandbox,--disable-dev-shm-usage \
      -Dwebdriver.chrome.verboseLogging=true \
      -Dwebdriver.chrome.driver=/usr/bin/chromedriver \
      -Dtest='!com.coremedia.**,!com.coremedia.blueprint.connectors.canto.rest.services.*' \
      -DfailIfNoTests=false
    #
    - docker images --filter=reference='coremedia/*:latest' --format "{{.Repository}} {{.Size}}"
    # select images to tag and push
    - coremImages=$(docker images --filter=reference='coremedia/*:latest' --format "{{.Repository}}"|grep -v studio-packages-proxy|grep -v site-manager)
    - imageTag=$(echo $CI_COMMIT_REF_NAME|sed -e 's/^v\([0-9][0-9\.]*\)-CMCC/\1/g')
    # https://docs.gitlab.com/ee/user/packages/container_registry/#using-with-private-projects
    - docker login -u $CONT_REGISTRY_USER -p $CONT_REGISTRY_PASSWORD $CONT_REGISTRY
    # We push to the branch name tags for snapshots and to $CI_COMMIT_REF_NAME and latest for releases.
    # Release tags are recognized by names starting with v like in v1.2.4.
    # Keep in mind that this could blow disk space at the target envs and in gitlab's container registry.
    # (https://docs.gitlab.com/ee/ci/variables/predefined_variables.html)
    - |
      for coremImage in $coremImages ; do
        filename="$(echo $coremImage | sed s/coremedia.//)"
        newImageName="$(echo $coremImage | sed s/coremedia/$CONT_REGISTRY_PATH/)"
        echo "$filename: $coremImage  - $newImageName"
        if [ ! -z "$(echo $CI_COMMIT_REF_NAME|grep ^v)" ]; then docker tag $coremImage "${newImageName}:latest" ; fi
        docker tag $coremImage "${newImageName}:$imageTag"
        if [ ! -z "$(echo $CI_COMMIT_REF_NAME|grep ^v)" ]; then docker push "${newImageName}:latest" ; fi
        docker push "${newImageName}:$imageTag"
      done
    # Don't keep too much transient stuff
    - rm -rf $(find $CI_PROJECT_DIR/repository/com/coremedia -name "$VERSION_AFTER")
    - repoJars=$(find $CI_PROJECT_DIR/repository -type f -name "*.jar" | wc -l) && echo "[cache-check] $repoJars JARs in Maven Repository"
    - remoteFiles=$(find .remote-packages -type f | wc -l) && echo "[cache-check] $remoteFiles file in JavaScript Cache"

Daily:
  except:
  - tags
  variables:
    <<: *gitlabRegistryVars
  <<: *createContainers

Release:
  only:
  - tags
  variables:
    CONT_REGISTRY: $EXTERNAL_REGISTRY
    CONT_REGISTRY_PATH: "$EXTERNAL_REGISTRY\\/coremedia_cms"
    CONT_REGISTRY_USER: $EXTERNAL_REGISTRY_USER
    CONT_REGISTRY_PASSWORD: $EXTERNAL_REGISTRY_PASSWORD
  <<: *createContainers
